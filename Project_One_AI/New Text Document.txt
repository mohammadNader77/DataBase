import java.util.Scanner;

public class MagneticCaveGame {
    private char[][] board;
    private char currentPlayer;
    private boolean gameOver;
    private int totalMoves;

    public MagneticCaveGame() {
        board = new char[8][8];
        currentPlayer = '■';
        gameOver = false;
        totalMoves = 0;
        initializeBoard();
    }

    private void initializeBoard() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                board[i][j] = '-';
            }
        }
    }

    private void printBoard() {
        System.out.println("Current board:");
        System.out.println("  A B C D E F G H");

        for (int i = 0; i < 8; i++) {
            System.out.print(i + 1 + " ");
            for (int j = 0; j < 8; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    private boolean isValidMove(int row, int col) {
        if (row < 0 || row >= 8 || col < 0 || col >= 8 || board[row][col] != '-')
            return false;

        if (col == 0) {
            return board[row][col + 1] != '-';
        } else if (col == 7) {
            return board[row][col - 1] != '-';
        } else {
            return (board[row][col - 1] != '-' || board[row][col + 1] != '-');
        }
    }

    private boolean hasWon(char player) {
        // Check rows
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j <= 3; j++) {
                if (board[i][j] == player && board[i][j + 1] == player && board[i][j + 2] == player &&
                        board[i][j + 3] == player && board[i][j + 4] == player) {
                    return true;
                }
            }
        }

        // Check columns
        for (int i = 0; i <= 3; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == player && board[i + 1][j] == player && board[i + 2][j] == player &&
                        board[i + 3][j] == player && board[i + 4][j] == player) {
                    return true;
                }
            }
        }

        // Check diagonals
        for (int i = 0; i <= 3; i++) {
            for (int j = 0; j <= 3; j++) {
                if (board[i][j] == player && board[i + 1][j + 1] == player && board[i + 2][j + 2] == player &&
                        board[i + 3][j + 3] == player && board[i + 4][j + 4] == player) {
                    return true;
                }
                if (board[i][j + 4] == player && board[i + 1][j + 3] == player && board[i + 2][j + 2] == player &&
                        board[i + 3][j + 1] == player && board[i + 4][j] == player) {
                    return true;
                }
            }
        }

        return false;
    }

    private boolean isBoardFull() {
        return totalMoves == 64;
    }

    private void makeMove(int row, int col) {
        board[row][col] = currentPlayer;
        totalMoves++;

        if (hasWon(currentPlayer)) {
            gameOver = true;
            System.out.println("Player " + currentPlayer + " wins!");
        } else if (isBoardFull()) {
            gameOver = true;
            System.out.println("It's a tie!");
        } else {
            currentPlayer = (currentPlayer == '■') ? '□' : '■';
        }
    }

    public void playManual() {
        Scanner scanner = new Scanner(System.in);
        printBoard();

        while (!gameOver) {
            System.out.print("Enter your move (e.g., A1): ");
            String move = scanner.nextLine().toUpperCase();

            if (move.length() != 2) {
                System.out.println("Invalid move! Please try again.");
                continue;
            }

            int col = move.charAt(0) - 'A';
            int row = move.charAt(1) - '1';

            if (isValidMove(row, col)) {
                makeMove(row, col);
                printBoard();
            } else {
                System.out.println("Invalid move! Please try again.");
            }
        }
    }

    private int minimax(char[][] board, int depth, int alpha, int beta, boolean maximizingPlayer) {
        if (depth == 0 || gameOver) {
            return evaluateBoard(board);
        }

        if (maximizingPlayer) {
            int maxEval = Integer.MIN_VALUE;
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (isValidMove(i, j)) {
                        board[i][j] = '□';
                        totalMoves++;
                        int eval = minimax(board, depth - 1, alpha, beta, false);
                        maxEval = Math.max(maxEval, eval);
                        alpha = Math.max(alpha, eval);
                        board[i][j] = '-';
                        totalMoves--;

                        if (beta <= alpha) {
                            break;
                        }
                    }
                }
            }
            return maxEval;
        } else {
            int minEval = Integer.MAX_VALUE;
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (isValidMove(i, j)) {
                        board[i][j] = '■';
                        totalMoves++;
                        int eval = minimax(board, depth - 1, alpha, beta, true);
                        minEval = Math.min(minEval, eval);
                        beta = Math.min(beta, eval);
                        board[i][j] = '-';
                        totalMoves--;

                        if (beta <= alpha) {
                            break;
                        }
                    }
                }
            }
            return minEval;
        }
    }

    private int evaluateBoard(char[][] board) {
        // Implement your heuristic evaluation function here
        return 0;
    }

    public void playAutomatic() {
        while (!gameOver) {
            if (currentPlayer == '■') {
                playManual();
            } else {
                int bestScore = Integer.MIN_VALUE;
                int bestRow = -1;
                int bestCol = -1;

                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (isValidMove(i, j)) {
                            board[i][j] = '□';
                            totalMoves++;
                            int score = minimax(board, 3, Integer.MIN_VALUE, Integer.MAX_VALUE, false);
                            board[i][j] = '-';
                            totalMoves--;

                            if (score > bestScore) {
                                bestScore = score;
                                bestRow = i;
                                bestCol = j;
                            }
                        }
                    }
                }

                makeMove(bestRow, bestCol);
                printBoard();
            }
        }
    }

    public static void main(String[] args) {
        MagneticCaveGame game = new MagneticCaveGame();
        game.playAutomatic();
    }
}
